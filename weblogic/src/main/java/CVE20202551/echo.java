package CVE20202551;

import cn.hutool.core.util.HexUtil;
import org.jsoup.select.Evaluator;
import util.HexStringUtil;
import util.WeblogicVersion;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.Arrays;

/**
 * @ClassName: echo
 * @Description: TODO
 * @Author: Summer
 * @Date: 2020/11/24 13:56
 * @Version: v1.0.0
 * @Description:
 **/
public class echo {
    static String IP = "192.168.116.146"; //ip
    static int PORT = 7001; // 端口
    static String Version = null; //Weblogic 版本号

    public static void main(String[] args) {

        String url = "http://" + IP + ":" + PORT ;
        // 使用http协议获取版本号
        Version = WeblogicVersion.getVersionByHttp(url);
        if ( Version != null ) {

            System.out.println(Version);
        }else {
            // 获取失败，使用T3协议获取
            Version = WeblogicVersion.getVersionByT3(IP, PORT);
            if (Version != null){
                System.out.println(Version);
            }else{
                System.out.println("Weblogic 版本号获取不明！");
            }
        }




        Socket socket = null;
        try {
            socket = new Socket(IP, PORT);

        } catch (IOException e) {
            e.printStackTrace();
        }
        // 第一步
        // Name Server请求
        String NameServer = "47494f50010200030000001700000002000000000000000b4e616d6553657276696365";

        try {
            // 发送请求
            byte[] nameserver = sendSocket(NameServer, socket);
            System.out.println("namesever --> " + HexUtil.decodeHexStr(HexStringUtil.binaryToHexString(nameserver)));
        } catch (Exception e) {
            //异常处理
            System.out.println("nameserver is error!");
            e.printStackTrace();
        }
        // 第二步



    }
    /**
     * @Description:
     * @param sendMessage 发送信息hexString字符串
     * @param socket    socket 连接
     * @return: 返回读取到的内容
     */
    public static byte[] sendSocket(String sendMessage, Socket socket) throws Exception {
        OutputStream out = socket.getOutputStream();
        InputStream is = socket.getInputStream();
        out.write(HexStringUtil.hexStrToBinaryStr(sendMessage));
        out.flush();
        byte[] bytes = new byte[4096];
        int length = is.read(bytes);
        return Arrays.copyOfRange(bytes, 0,length);
    }
}
